#!/bin/bash
#
# Build several multiconfig targets in parallel
#
# Bitbake seems to serialize multiconfig builds.
#
# Example usage:
# scripts/build_parallel ../build multiconfig:qemuarm-wheezy:isar-image-base multiconfig:qemuarm-jessie:isar-image-base multiconfig:rpi-jessie:isar-image-base
#
# This software is a part of Isar.
# Copyright (C) 2017 ilbers GmbH
#
# Test:
# - As is
# - With opt_exit=1
# - With opt_debug=11

ES_OK=0
ES_SYNTAX=1
ES_RUNTIME=2
ES_NOTREACHED=255

dbg() {
    local cat=$1
    local lvl=$2
    shift 2
    if [ "$lvl" -lt $opt_debug ]; then
	echo $* >&2
    fi
}

if [ $# -lt 2 ]; then
    echo "$0: ERROR: Too few arguments" >&2
    echo "Usage: $0 BUILD_DIR_TEMPLATE TARGET..." >&2
    exit $ES_SYNTAX
fi

bdirt=$1
shift
targets="$*"

opt_exit=0
opt_debug=0

XTERM=urxvt

n=`echo $targets |wc -w`
ret=$ES_OK
i=1

time (
    for t in $targets; do
	# urxvt seems to always return zero, use files to return exit status.
	# Provide a value if subprocess fails to write one.
	echo $ES_NOTREACHED >${bdirt}-$i-ret
	# Exit on success, remain in $XTERM on failure to ease debugging
	$XTERM -e bash --init-file <(echo " \
            echo -n \`pwd\`'$ '; \
            tput bold; \
            echo . isar-init-build-env ${bdirt}-$i; \
            tput sgr0; \
            . isar-init-build-env ${bdirt}-$i; \
            echo -n \`pwd\`'$ '; \
            tput bold; \
            echo time bitbake $t; \
            tput sgr0; \
            time bitbake $t; \
            r=\$?; \
            echo \$r >${bdirt}-$i-ret; \
            if [ $opt_exit != 0 -a \$r = $ES_OK ]; then \
                exit $ES_OK; \
            fi") &
	pid[$i]=$!
	dbg CHLD 10 pid ${pid[$i]} dir ${bdirt}-$i target $t
	i=$((i+1))
    done
    for i in `seq 1 $n`; do
	wait ${pid[$i]}
	r=`cat ${bdirt}-$i-ret`
	# Don't use -ne to prevent [ errors if $r contains non-numeric garbage
	if [ "$r" != $ES_OK ]; then
	    t=`echo $targets |awk '{ print $'$i' }'`
	    echo "ERROR: Target $t failed in ${bdirt}-$i with $r" >&2
	    rm -f ${bdirt}-$i-ret
	    ret=$ES_RUNTIME
	fi
    done)

exit $ret
